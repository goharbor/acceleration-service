name: Integration Test

on:
  push:
    branches: [ '*' ]
    paths-ignore: [ '**.md']
  pull_request:
    branches: [ main ]
    paths-ignore: [ '**.md']

env:
  OCI_IMAGE_NAME: redis

jobs:
  accel_check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Golang
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Check
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.59
        args: --timeout=10m --issues-exit-code=0

  accel_build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Golang
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Build Accel
      run: |
        make

    - name: Upload Accel
      uses: actions/upload-artifact@v4
      with:
        name: accel-artifact
        path: |
          ./accelctl
          ./acceld

  integration_test:
    runs-on: ubuntu-latest
    needs: [accel_build]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Acceld
      uses: actions/download-artifact@v4
      with:
        name: accel-artifact

    - name: Install Harbor
      run: |
        HARBOR_VERION=$(curl https://api.github.com/repos/goharbor/harbor/releases/latest | jq -r '.tag_name')
        wget https://github.com/goharbor/harbor/releases/download/${HARBOR_VERION}/harbor-offline-installer-${HARBOR_VERION}.tgz
        tar xzvf harbor-offline-installer-${HARBOR_VERION}.tgz
        cp ./script/integration/harbor.yml harbor/harbor.yml
        cd harbor
        sudo ./install.sh

    - name: Prepare Test Image
      run: |
        sudo docker pull ${{ env.OCI_IMAGE_NAME }}
        sudo docker login -u admin -p Harbor12345 localhost
        sudo docker tag ${{ env.OCI_IMAGE_NAME }} localhost/library/${{ env.OCI_IMAGE_NAME }}
        sudo docker push localhost/library/${{ env.OCI_IMAGE_NAME }}

    - name: Test Nydus Driver
      run: |
        chmod +x accel*
        # Download nydus components
        NYDUS_VERSION=$(curl https://api.github.com/repos/Dragonflyoss/nydus/releases/latest | jq -r '.tag_name')
        wget https://github.com/dragonflyoss/image-service/releases/download/${NYDUS_VERSION}/nydus-static-${NYDUS_VERSION}-linux-amd64.tgz
        sudo tar xzvf nydus-static-${NYDUS_VERSION}-linux-amd64.tgz --wildcards --strip-components=1 -C /usr/bin/ nydus-static/*
        ./script/integration/nydus/test.sh ${{ env.OCI_IMAGE_NAME }}

    - name: Test eStargz Driver
      run: |
        ./script/integration/estargz/test.sh ${{ env.OCI_IMAGE_NAME }}

    - name: Test one-time mode
      run: |
        ./script/integration/one-time.sh ${{ env.OCI_IMAGE_NAME }}
